# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gJMliPGw6E7gs3lzE-TSgYGJiGYHBYBD
"""

#Team - 10
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import metrics
import os

#Import Dataset
df=pd.read_excel("/content/df.xlsx")

df.head()

df.shape

df.info()

df.isnull()

df.isnull().sum()

df.describe()

sns.countplot(x='diagnosis', data =df)
plt.show()

sns.pairplot(df.iloc[:,1:6],hue="diagnosis")
plt.show()

plt.figure(figsize=(30,25))
sns.heatmap(df.corr())
ax = sns.heatmap(df.corr(),vmin=-1,vmax=1,center=0,annot=True)
plt.show()

sns.displot(data=df,
            x='Radius_mean',
            hue='diagnosis',
            kind='kde',
            fill=True,
            height=5, aspect=1.5)

df['diagnosis'].value_counts()

df.groupby(['diagnosis']).mean()

df.replace({'diagnosis':{'M':1 , 'B':0}},inplace = True)

X = df.drop(columns={'diagnosis' , 'id'}, axis=1)
y = df['diagnosis']

X

y

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify = y,  random_state = 1)

print(X.shape, X_train.shape, X_test.shape)

print(y.shape, y_train.shape, y_test.shape)

from sklearn.tree import DecisionTreeClassifier
classifier= DecisionTreeClassifier()
classifier.fit(X_train, y_train)

classifier.score(X_test, y_test)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
y_pred = classifier.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
ConfusionMatrixDisplay(cm).plot()
plt.show()

patient1 = np.array([7.76,
                     124.54, 
                     47.92,
                     18  1.0,
                     100.05263,
                     0.04362,
                     0.00000,
                    0.000001,
                     0.1587,
                     0.05884,
                     0.3857,
                     1.428,
                     2.548,
                     19.15,
                     0.007189,
                     0.00466,
                     0,
                     0,
                     0.02676,
                     0.002783,
                     9.456,
                     30.37,
                     59.16,
                     268.6,
                     0.08996,
                     0.06444,
                     0.0000,
                     0.0000,
                     0.2871,
                     0.07039])

pred = patient1.reshape(1,-1)
pred = classifier.predict(pred)
if pred == 0:
    print ('Patient has no cancer')
else:
    print ('Patient has cancer')